{
	"name": "cache_Lab",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customer_Source",
						"type": "DatasetReference"
					},
					"name": "Customer"
				},
				{
					"dataset": {
						"referenceName": "Customer_Tables",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Customer_Tables",
						"type": "DatasetReference"
					},
					"name": "CustomerSink"
				},
				{
					"name": "CacheSink"
				}
			],
			"transformations": [
				{
					"name": "selectSteram"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "UpdateSurrogateKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          NameStyle as string,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customer",
				"source(output(",
				"          Customer_SK as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max(Customer_SK) as Customer_SK  from [dbo].[Customer]\\n',",
				"     format: 'query',",
				"     staged: true) ~> source1",
				"Customer select(mapColumn(",
				"          CustomerID,",
				"          CompanyName,",
				"          SalesPerson",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSteram",
				"selectSteram keyGenerate(output(Customer_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(Customer_SK = Customer_SK + CacheSink#outputs()[1].Customer_SK) ~> UpdateSurrogateKey",
				"UpdateSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CustomerSink",
				"source1 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> CacheSink"
			]
		}
	}
}